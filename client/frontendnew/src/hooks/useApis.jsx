
// This file is auto-generated by generateApiHooks.js. Do not edit manually.
// To regenerate, run 'npm run gen:api:client' or 'npm run dev'.
import { useQuery, useMutation } from '@tanstack/react-query';

// --- API Client Configuration ---
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'https://zettanix.in';

/**
 * A generic API client that handles different content types.
 * @param {string} method HTTP method (e.g., 'get', 'post')
 * @param {string} path API endpoint path
 * @param {any} data Request body data
 * @param {string} contentType The Content-Type header value
 */
async function apiClient(method, path, data = null, contentType = 'application/json') {
  const url = `${API_BASE_URL}${path}`;
  const options = {
    method: method.toUpperCase(),
  };

  // Add authorization header if token exists
  const token = localStorage.getItem('accessToken');
  if (token) {
    options.headers = {
      'Authorization': `Bearer ${token}`,
    };
    console.log('API call with token:', token.substring(0, 10) + '...');
  } else {
    console.log('No token found for API call to:', path);
  }

  if (data) {
    if (contentType === 'multipart/form-data') {
      options.body = data; // Assumes data is already a FormData object
    } else {
      options.headers = {
        ...options.headers,
        'Content-Type': contentType,
      };
      options.body = JSON.stringify(data);
    }
  }

  const response = await fetch(url, options);

  if (!response.ok) {
    const error = new Error(`API request failed with status ${response.status}`);
    try {
      error.response = await response.json();
    } catch (e) {
      error.response = await response.text();
    }
    throw error;
  }

  if (response.headers.get('content-type')?.includes('application/json')) {
    return response.json();
  }
  
  return response.text();
}

// --- Generated Models & Types ---
/**
 * @typedef {object} AnalysisStatus
 */
/**
 * @typedef {object} Body_upload_resume_api_v1_resumes_post
 * @property {string} file
 * @property {object} callback_url
 */
/**
 * @typedef {object} HTTPValidationError
 * @property {ValidationError[]} detail
 */
/**
 * @typedef {object} HealthModel
 * @property {string} status
 * @property {string} service
 * @property {string} version
 * @property {string} timestamp
 */
/**
 * @typedef {object} HealthZModel
 * @property {string} status
 */
/**
 * @typedef {object} ResumeAnalysis
 * @property {integer} id
 * @property {AnalysisStatus} status
 * @property {object} analysis
 * @property {object} error_message
 */
/**
 * @typedef {object} ResumeRead
 * @property {object} filename
 * @property {object} callback_url
 * @property {integer} id
 * @property {object} content_type
 * @property {object} file_url
 * @property {AnalysisStatus} status
 * @property {object} ai_model
 * @property {string} created_at
 * @property {string} updated_at
 */
/**
 * @typedef {object} RootModel
 * @property {string} message
 * @property {string} version
 * @property {string} docs
 * @property {string} health
 */
/**
 * @typedef {object} ValidationError
 * @property {object[]} loc
 * @property {string} msg
 * @property {string} type
 */
/**
 * @typedef {object} BehavioralEvaluationRequest
 * @property {string} question
 * @property {string} response
 */
/**
 * @typedef {object} BehavioralEvaluationResult
 * @property {string} evaluation
 */
/**
 * @typedef {object} BehavioralQuestionsResponse
 * @property {string[]} questions
 */
/**
 * @typedef {object} BehavioralRequest
 * @property {string} skills
 * @property {string} level
 * @property {string} job_role
 * @property {string} test_type
 * @property {string} company
 */
/**
 * @typedef {object} ChallengeRequest
 * @property {string} skills
 * @property {string} job_role
 * @property {string} job_description
 * @property {string} level
 * @property {string} company
 */
/**
 * @typedef {object} ChallengeResponse
 * @property {string} challenge
 */
/**
 * @typedef {object} CodeEvaluationRequest
 * @property {string} challenge
 * @property {string} solution
 */
/**
 * @typedef {object} CodeEvaluationResponse
 * @property {string} evaluation
 */
/**
 * @typedef {object} CompanyAnswerEvaluationResponse
 * @property {string} evaluation
 */
/**
 * @typedef {object} CompanyAnswerRequest
 * @property {string} company
 * @property {string} round
 * @property {string} question
 * @property {string} answer
 * @property {string} type
 * @property {string} role
 * @property {string} experience
 */
/**
 * @typedef {object} CompanyQuestionRequest
 * @property {string} company
 * @property {string} round
 * @property {string} focus
 * @property {string} description
 * @property {string} type
 * @property {string} role
 * @property {string} experience
 */
/**
 * @typedef {object} CompanyQuestionResponse
 * @property {string} question
 */
/**
 * @typedef {object} EvaluateRequest
 * @property {Question[]} questions
 * @property {string[]} answers
 */
/**
 * @typedef {object} EvaluateResponse
 * @property {integer} score
 * @property {integer} total
 * @property {boolean} passed
 * @property {number} time_taken
 * @property {EvaluationResult[]} results
 */
/**
 * @typedef {object} EvaluationResult
 * @property {string} question
 * @property {string} user_answer
 * @property {string} correct_answer
 * @property {boolean} is_correct
 */
/**
 * @typedef {object} GenerateResponse
 * @property {integer} seed
 * @property {Question[]} questions
 */
/**
 * @typedef {object} InterviewPDFRequest
 * @property {number} final_score
 * @property {object} scores
 * @property {object} section_times
 * @property {object} recommendations
 * @property {string} skills
 * @property {string} test_type
 */
/**
 * @typedef {object} InterviewPDFResponse
 * @property {string} pdf
 */
/**
 * @typedef {object} MCQQuestion
 * @property {string} question
 * @property {string[]} options
 * @property {string} answer
 */
/**
 * @typedef {object} MCQRequest
 * @property {string} skills
 * @property {string} level
 * @property {string} job_role
 * @property {string} job_description
 * @property {string} test_type
 */
/**
 * @typedef {object} MCQResponse
 * @property {MCQQuestion[]} questions
 */
/**
 * @typedef {object} PerformanceGapsRequest
 * @property {object} scores
 * @property {string} feedback
 */
/**
 * @typedef {object} PerformanceGapsResponse
 * @property {object} analysis
 */
/**
 * @typedef {object} Question
 * @property {string} question
 * @property {string} answer
 */
/**
 * @typedef {object} ReportRequest
 * @property {object[]} jobs
 * @property {object} analysis
 */
/**
 * @typedef {object} ReportResponse
 * @property {object} report
 */
/**
 * @typedef {object} SkillRecommendationsRequest
 * @property {string} skills
 * @property {object} scores
 */
/**
 * @typedef {object} SkillRecommendationsResponse
 * @property {object} recommendations
 */
/**
 * @typedef {object} WritingEvaluationRequest
 * @property {string} prompt
 * @property {string} response
 */
/**
 * @typedef {object} WritingEvaluationResult
 * @property {string} evaluation
 */
/**
 * @typedef {object} WritingPromptResponse
 * @property {string} prompt
 */
/**
 * @typedef {object} WritingRequest
 * @property {string} skills
 * @property {string} job_role
 * @property {string} test_type
 */
/**
 * @typedef {object} LoginRequest
 * @property {string} email
 * @property {string} password
 */
/**
 * @typedef {object} TokenIntrospection
 * @property {boolean} active
 * @property {object} sub
 * @property {object} exp
 * @property {object} roles
 */
/**
 * @typedef {object} TokenPair
 * @property {string} access_token
 * @property {string} refresh_token
 * @property {string} token_type
 */
/**
 * @typedef {object} UserCreate
 * @property {string} email
 * @property {object} name
 * @property {object} phone
 * @property {object} is_active
 * @property {object} is_superuser
 * @property {string} password
 */
/**
 * @typedef {object} UserOut
 * @property {string} email
 * @property {object} name
 * @property {object} phone
 * @property {object} is_active
 * @property {object} is_superuser
 * @property {integer} id
 * @property {string[]} roles
 */
/**
 * @typedef {object} CompanyCreate
 * @property {string} name
 * @property {object} website
 * @property {object} domain
 * @property {object} industry
 * @property {object} size_range
 * @property {object} hq_country
 * @property {object} hq_city
 * @property {object} founded_year
 * @property {object} description
 */
/**
 * @typedef {object} CompanyOut
 * @property {string} name
 * @property {object} website
 * @property {object} domain
 * @property {object} industry
 * @property {object} size_range
 * @property {object} hq_country
 * @property {object} hq_city
 * @property {object} founded_year
 * @property {object} description
 * @property {integer} id
 * @property {string} created_at
 * @property {string} updated_at
 */
/**
 * @typedef {object} CompanyUpdate
 * @property {string} name
 * @property {object} website
 * @property {object} domain
 * @property {object} industry
 * @property {object} size_range
 * @property {object} hq_country
 * @property {object} hq_city
 * @property {object} founded_year
 * @property {object} description
 */
/**
 * @typedef {object} EmploymentType
 */
/**
 * @typedef {object} JobCreate
 * @property {string} title
 * @property {string} description
 * @property {object} company_name
 * @property {object} company_website
 * @property {object} company_id
 * @property {EmploymentType} employment_type
 * @property {WorkType} work_type
 * @property {object} seniority_level
 * @property {object} country
 * @property {object} state
 * @property {object} city
 * @property {object} address
 * @property {object} min_experience_years
 * @property {object} max_experience_years
 * @property {object} skills
 * @property {object} tags
 * @property {object} salary_currency
 * @property {object} salary_min
 * @property {object} salary_max
 * @property {SalaryPeriod} salary_period
 * @property {object} benefits
 * @property {boolean} visa_sponsorship
 * @property {boolean} relocation_assistance
 * @property {object} application_url
 * @property {object} application_email
 * @property {JobStatus} status
 */
/**
 * @typedef {object} JobOut
 * @property {string} title
 * @property {string} description
 * @property {object} company_name
 * @property {object} company_website
 * @property {object} company_id
 * @property {EmploymentType} employment_type
 * @property {WorkType} work_type
 * @property {object} seniority_level
 * @property {object} country
 * @property {object} state
 * @property {object} city
 * @property {object} address
 * @property {object} min_experience_years
 * @property {object} max_experience_years
 * @property {object} skills
 * @property {object} tags
 * @property {object} salary_currency
 * @property {object} salary_min
 * @property {object} salary_max
 * @property {SalaryPeriod} salary_period
 * @property {object} benefits
 * @property {boolean} visa_sponsorship
 * @property {boolean} relocation_assistance
 * @property {object} application_url
 * @property {object} application_email
 * @property {JobStatus} status
 * @property {integer} id
 * @property {string} posted_at
 * @property {string} updated_at
 * @property {boolean} is_deleted
 * @property {object} deleted_at
 * @property {object} company
 */
/**
 * @typedef {object} JobStatus
 */
/**
 * @typedef {object} JobUpdate
 * @property {string} title
 * @property {string} description
 * @property {object} company_name
 * @property {object} company_website
 * @property {object} company_id
 * @property {EmploymentType} employment_type
 * @property {WorkType} work_type
 * @property {object} seniority_level
 * @property {object} country
 * @property {object} state
 * @property {object} city
 * @property {object} address
 * @property {object} min_experience_years
 * @property {object} max_experience_years
 * @property {object} skills
 * @property {object} tags
 * @property {object} salary_currency
 * @property {object} salary_min
 * @property {object} salary_max
 * @property {SalaryPeriod} salary_period
 * @property {object} benefits
 * @property {boolean} visa_sponsorship
 * @property {boolean} relocation_assistance
 * @property {object} application_url
 * @property {object} application_email
 * @property {JobStatus} status
 */
/**
 * @typedef {object} SalaryPeriod
 */
/**
 * @typedef {object} SeniorityLevel
 */
/**
 * @typedef {object} WorkType
 */
/**
 * @typedef {object} CacheRefreshResponse
 * @property {boolean} success - Request success status
 * @property {string} message - Response message
 * @property {string} timestamp - Response timestamp
 */
/**
 * @typedef {object} NewsCategory
 */
/**
 * @typedef {object} NewsItem
 * @property {object} id
 * @property {string} title - News title
 * @property {object} description - News description
 * @property {string} url - News URL
 * @property {string} source_name - Source name
 * @property {NewsCategory} category - News category
 * @property {object} published_at - Publication date
 * @property {object} image_url - Image URL
 * @property {object} author - Author name
 * @property {object} relevance_score - Relevance score
 */
/**
 * @typedef {object} NewsResponse
 * @property {boolean} success - Request success status
 * @property {NewsItem[]} data - News items
 * @property {integer} count - Number of news items
 * @property {boolean} cached - Whether data is from cache
 * @property {string} timestamp - Response timestamp
 */
/**
 * @typedef {object} NewsSummaryResponse
 * @property {boolean} success - Request success status
 * @property {object} data - Summary data
 * @property {string} timestamp - Response timestamp
 */
/**
 * @typedef {object} AvailabilityIn
 * @property {string} starts_at
 * @property {string} ends_at
 * @property {object} is_recurring
 * @property {object} rrule
 */
/**
 * @typedef {object} AvailabilityOut
 * @property {string} starts_at
 * @property {string} ends_at
 * @property {object} is_recurring
 * @property {object} rrule
 * @property {integer} id
 * @property {integer} mentor_id
 */
/**
 * @typedef {object} GoalIn
 * @property {integer} skill_id
 * @property {integer} priority
 * @property {object} target_date
 * @property {object} notes
 */
/**
 * @typedef {object} GoalOut
 * @property {integer} skill_id
 * @property {integer} priority
 * @property {object} target_date
 * @property {object} notes
 * @property {integer} id
 * @property {integer} mentee_id
 */
/**
 * @typedef {object} MentorSkillIn
 * @property {integer} skill_id
 * @property {integer} level
 * @property {integer} years
 */
/**
 * @typedef {object} MentorSkillOut
 * @property {integer} skill_id
 * @property {integer} level
 * @property {integer} years
 * @property {integer} mentor_id
 */
/**
 * @typedef {object} ProfileOut
 * @property {integer} auth_user_id
 * @property {object} full_name
 * @property {object} headline
 * @property {object} bio
 * @property {object} timezone
 * @property {object} languages
 * @property {object} avatar_url
 * @property {boolean} is_mentor
 * @property {boolean} is_mentee
 * @property {object} years_experience
 */
/**
 * @typedef {object} ProfileUpdate
 * @property {object} full_name
 * @property {object} headline
 * @property {object} bio
 * @property {object} timezone
 * @property {object} languages
 * @property {object} avatar_url
 * @property {object} is_mentor
 * @property {object} is_mentee
 * @property {object} years_experience
 */
/**
 * @typedef {object} ReviewIn
 * @property {integer} rating
 * @property {object} text
 */
/**
 * @typedef {object} SessionIn
 * @property {integer} mentor_id
 * @property {string} starts_at
 * @property {string} ends_at
 * @property {object} agenda
 */
/**
 * @typedef {object} SessionOut
 * @property {integer} mentor_id
 * @property {string} starts_at
 * @property {string} ends_at
 * @property {object} agenda
 * @property {integer} id
 * @property {integer} mentee_id
 * @property {string} status
 */
/**
 * @typedef {object} SkillBase
 * @property {string} name
 * @property {object} category
 */
/**
 * @typedef {object} SkillOut
 * @property {string} name
 * @property {object} category
 * @property {integer} id
 */
/**
 * @typedef {object} Body_parse_resume_legacy_parse_resume_post
 * @property {string} file
 */
/**
 * @typedef {object} Body_parse_resume_resume_parse_post
 * @property {string} file
 */
/**
 * @typedef {object} CertificationSchema
 * @property {object} name
 * @property {object} issuer
 * @property {object} date
 * @property {object} url
 */
/**
 * @typedef {object} EducationSchema
 * @property {object} institution
 * @property {object} degree
 * @property {object} field
 * @property {object} start_date
 * @property {object} end_date
 * @property {object} gpa
 */
/**
 * @typedef {object} ExperienceSchema
 * @property {object} company
 * @property {object} position
 * @property {object} start_date
 * @property {object} end_date
 * @property {object} description
 * @property {string[]} achievements
 */
/**
 * @typedef {object} ExportRequestSchema
 * @property {ResumeDataSchema} data
 */
/**
 * @typedef {object} HealthResponseSchema
 * @property {string} status
 * @property {string} gemini_api
 * @property {string} tesseract
 */
/**
 * @typedef {object} PersonalInfoSchema
 * @property {object} name
 * @property {object} email
 * @property {object} phone
 * @property {object} location
 * @property {object} linkedin
 * @property {object} github
 * @property {object} website
 */
/**
 * @typedef {object} ProjectSchema
 * @property {object} name
 * @property {object} description
 * @property {string[]} technologies
 * @property {object} url
 */
/**
 * @typedef {object} ResumeDataSchema
 * @property {PersonalInfoSchema} personal_info
 * @property {object} summary
 * @property {string[]} skills
 * @property {ExperienceSchema[]} experience
 * @property {EducationSchema[]} education
 * @property {ProjectSchema[]} projects
 * @property {CertificationSchema[]} certifications
 * @property {string[]} hobbies
 */
/**
 * @typedef {object} ResumeGenerateRequestSchema
 * @property {ResumeDataSchema} data
 * @property {object} job_description
 */
/**
 * @typedef {object} ResumeGenerateResponseSchema
 * @property {boolean} success
 * @property {string} generated_resume
 */
/**
 * @typedef {object} ResumeParseResponseSchema
 * @property {boolean} success
 * @property {ResumeDataSchema} data
 * @property {string} extracted_text
 */
/**
 * @typedef {object} Body_record_audio_audio_record_post
 * @property {string} audio
 * @property {number} duration
 */
/**
 * @typedef {object} Body_transcribe_audio_file_audio_transcribe_post
 * @property {string} file
 */
/**
 * @typedef {object} CompanyTemplate
 */
/**
 * @typedef {object} DifficultyLevel
 */
/**
 * @typedef {object} FrameAnalysisRequest
 * @property {string} frame_data
 */
/**
 * @typedef {object} FrameAnalysisResponse
 * @property {object} posture
 * @property {object} eye_contact
 * @property {object} facial_expression
 * @property {object} hand_gestures
 * @property {object} head_movement
 * @property {number} overall_score
 * @property {number} confidence_score
 * @property {string[]} real_time_suggestions
 * @property {number} timestamp
 */
/**
 * @typedef {object} HealthResponse
 * @property {string} status
 * @property {string} version
 * @property {object} services
 */
/**
 * @typedef {object} IndustryType
 */
/**
 * @typedef {object} InterviewMode
 */
/**
 * @typedef {object} InterviewReplyRequest
 * @property {string} session_id
 * @property {string} user_response
 * @property {object} input_method
 */
/**
 * @typedef {object} InterviewReplyResponse
 * @property {string} next_question
 * @property {object} feedback
 * @property {boolean} is_final
 * @property {object} analysis
 * @property {object} real_time_feedback
 */
/**
 * @typedef {object} InterviewStartRequest
 * @property {InterviewType} interview_type
 * @property {string} position
 * @property {DifficultyLevel} experience_level
 * @property {object} preferred_language
 * @property {InterviewMode} mode
 * @property {IndustryType} industry
 * @property {object} company_template
 * @property {object} custom_instructions
 * @property {object} user_id
 */
/**
 * @typedef {object} InterviewStartResponse
 * @property {string} session_id
 * @property {string} first_question
 * @property {InterviewType} interview_type
 * @property {InterviewMode} mode
 * @property {object} template_info
 */
/**
 * @typedef {object} InterviewType
 */

// --- Generated React Query Hooks ---

/**
 * @description Hook for /resumes/api/v1/resumes [GET]
 * @returns {import('@tanstack/react-query').QueryResult<ResumeRead[]>}
 */
export const listResumesApiV1ResumesGet = (options) => {
  const queryKey = ['list_resumes_api_v1_resumes_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/resumes/api/v1/resumes'),
    ...options,
  });
};

/**
 * @description Hook for /resumes/api/v1/resumes [POST]
 * @param {Body_upload_resume_api_v1_resumes_post} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<ResumeRead, unknown, Body_upload_resume_api_v1_resumes_post>}
 */
export const uploadResumeApiV1ResumesPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/resumes/api/v1/resumes', data, 'multipart/form-data'),
    ...options,
  });
};

/**
 * @description Hook for /resumes/api/v1/resumes/{resume_id} [GET]
 * @returns {import('@tanstack/react-query').QueryResult<ResumeRead>}
 */
export const getResumeApiV1Resumes_ResumeId_Get = (options) => {
  const resume_id = options?.resume_id;
  const queryKey = ['get_resume_api_v1_resumes__resume_id__get', resume_id];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', `/resumes/api/v1/resumes/${resume_id}`),
    enabled: !!resume_id,
    ...options,
  });
};

/**
 * @description Hook for /resumes/api/v1/resumes/{resume_id} [DELETE]
 * @param {void} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<object, unknown, void>}
 */
export const deleteResumeApiV1Resumes_ResumeId_Delete = (options) => {
  return useMutation({
    mutationFn: ({ resume_id, ...data }) => apiClient('delete', `/resumes/api/v1/resumes/${resume_id}`, data),
    ...options,
  });
};

/**
 * @description Hook for /resumes/api/v1/resumes/{resume_id}/analysis [GET]
 * @returns {import('@tanstack/react-query').QueryResult<ResumeAnalysis>}
 */
export const getAnalysisApiV1Resumes_ResumeId_AnalysisGet = (options) => {
  const resume_id = options?.resume_id;
  const queryKey = ['get_analysis_api_v1_resumes__resume_id__analysis_get', resume_id];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', `/resumes/api/v1/resumes/${resume_id}/analysis`),
    enabled: !!resume_id,
    ...options,
  });
};

/**
 * @description Hook for /resumes/api/v1/resumes/admin/all [GET]
 * @returns {import('@tanstack/react-query').QueryResult<ResumeRead[]>}
 */
export const adminListAllApiV1ResumesAdminAllGet = (options) => {
  const queryKey = ['admin_list_all_api_v1_resumes_admin_all_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/resumes/api/v1/resumes/admin/all'),
    ...options,
  });
};

/**
 * @description Hook for /resumes/ [GET]
 * @returns {import('@tanstack/react-query').QueryResult<RootModel>}
 */
export const resumeRoot_Get = (options) => {
  const queryKey = ['resume_root__get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/resumes/'),
    ...options,
  });
};

/**
 * @description Hook for /resumes/health [GET]
 * @returns {import('@tanstack/react-query').QueryResult<HealthModel>}
 */
export const resumeHealthCheckHealthGet = (options) => {
  const queryKey = ['resume_health_check_health_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/resumes/health'),
    ...options,
  });
};

/**
 * @description Hook for /resumes/healthz [GET]
 * @returns {import('@tanstack/react-query').QueryResult<HealthZModel>}
 */
export const healthzHealthzGet = (options) => {
  const queryKey = ['healthz_healthz_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/resumes/healthz'),
    ...options,
  });
};

/**
 * @description Hook for /quiz/generate_aptitude [POST]
 * @param {void} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<GenerateResponse, unknown, void>}
 */
export const generateQuestionsGenerateAptitudePost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/quiz/generate_aptitude', data),
    ...options,
  });
};

/**
 * @description Hook for /quiz/evaluate_aptitude [POST]
 * @param {EvaluateRequest} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<EvaluateResponse, unknown, EvaluateRequest>}
 */
export const evaluateAnswersEvaluateAptitudePost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/quiz/evaluate_aptitude', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /quiz/generate_challenge [POST]
 * @param {ChallengeRequest} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<ChallengeResponse, unknown, ChallengeRequest>}
 */
export const generateRandomCodingChallengeGenerateChallengePost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/quiz/generate_challenge', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /quiz/evaluate_code [POST]
 * @param {CodeEvaluationRequest} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<CodeEvaluationResponse, unknown, CodeEvaluationRequest>}
 */
export const evaluateCodeSolutionEvaluateCodePost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/quiz/evaluate_code', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /quiz/generate_mcq [POST]
 * @param {MCQRequest} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<MCQResponse, unknown, MCQRequest>}
 */
export const generateMcqQuestionsGenerateMcqPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/quiz/generate_mcq', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /quiz/generate_behavioral_questions [POST]
 * @param {BehavioralRequest} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<BehavioralQuestionsResponse, unknown, BehavioralRequest>}
 */
export const generateBehavioralQuestionsGenerateBehavioralQuestionsPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/quiz/generate_behavioral_questions', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /quiz/evaluate_behavioral [POST]
 * @param {BehavioralEvaluationRequest} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<BehavioralEvaluationResult, unknown, BehavioralEvaluationRequest>}
 */
export const evaluateBehavioralResponseEvaluateBehavioralPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/quiz/evaluate_behavioral', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /quiz/generate_writing_prompt [POST]
 * @param {WritingRequest} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<WritingPromptResponse, unknown, WritingRequest>}
 */
export const generateWritingPromptGenerateWritingPromptPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/quiz/generate_writing_prompt', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /quiz/evaluate_writing [POST]
 * @param {WritingEvaluationRequest} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<WritingEvaluationResult, unknown, WritingEvaluationRequest>}
 */
export const evaluateWritingResponseEvaluateWritingPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/quiz/evaluate_writing', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /quiz/analyze_performance_gaps [POST]
 * @param {PerformanceGapsRequest} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<PerformanceGapsResponse, unknown, PerformanceGapsRequest>}
 */
export const analyzePerformanceGapsAnalyzePerformanceGapsPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/quiz/analyze_performance_gaps', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /quiz/generate_skill_based_recommendations [POST]
 * @param {SkillRecommendationsRequest} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<SkillRecommendationsResponse, unknown, SkillRecommendationsRequest>}
 */
export const generateSkillBasedRecommendationsGenerateSkillBasedRecommendationsPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/quiz/generate_skill_based_recommendations', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /quiz/download-report [POST]
 * @param {ReportRequest} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<ReportResponse, unknown, ReportRequest>}
 */
export const downloadReportDownloadReportPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/quiz/download-report', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /quiz/generate_interview_pdf [POST]
 * @param {InterviewPDFRequest} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<InterviewPDFResponse, unknown, InterviewPDFRequest>}
 */
export const generateInterviewPdfGenerateInterviewPdfPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/quiz/generate_interview_pdf', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /quiz/company-rounds [GET]
 * @returns {import('@tanstack/react-query').QueryResult<object>}
 */
export const getCompanyRoundsCompanyRoundsGet = (options) => {
  const queryKey = ['get_company_rounds_company_rounds_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/quiz/company-rounds'),
    ...options,
  });
};

/**
 * @description Hook for /quiz/generate_company_question [POST]
 * @param {CompanyQuestionRequest} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<CompanyQuestionResponse, unknown, CompanyQuestionRequest>}
 */
export const generateCompanyQuestionGenerateCompanyQuestionPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/quiz/generate_company_question', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /quiz/evaluate_company_answer [POST]
 * @param {CompanyAnswerRequest} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<CompanyAnswerEvaluationResponse, unknown, CompanyAnswerRequest>}
 */
export const evaluateCompanyAnswerEvaluateCompanyAnswerPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/quiz/evaluate_company_answer', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /quiz/ [GET]
 * @returns {import('@tanstack/react-query').QueryResult<object>}
 */
export const quizRoot_Get = (options) => {
  const queryKey = ['quiz_root__get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/quiz/'),
    ...options,
  });
};

/**
 * @description Hook for /quiz/health [GET]
 * @returns {import('@tanstack/react-query').QueryResult<object>}
 */
export const QuizHealthCheckHealthGet = (options) => {
  const queryKey = ['Quiz_health_check_health_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/quiz/health'),
    ...options,
  });
};

/**
 * @description Hook for /auth/register [POST]
 * @param {UserCreate} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<UserOut, unknown, UserCreate>}
 */
export const registerRegisterPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/auth/register', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /auth/login [POST]
 * @param {LoginRequest} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<TokenPair, unknown, LoginRequest>}
 */
export const loginLoginPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/auth/login', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /auth/refresh [POST]
 * @param {void} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<TokenPair, unknown, void>}
 */
export const refreshTokenRefreshPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/auth/refresh', data),
    ...options,
  });
};

/**
 * @description Hook for /auth/me [GET]
 * @returns {import('@tanstack/react-query').QueryResult<UserOut>}
 */
export const meMeGet = (options) => {
  const queryKey = ['me_me_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/auth/me'),
    ...options,
  });
};

/**
 * @description Hook for /auth/introspect [POST]
 * @param {void} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<TokenIntrospection, unknown, void>}
 */
export const introspectIntrospectPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/auth/introspect', data),
    ...options,
  });
};

/**
 * @description Hook for /auth/ [GET]
 * @returns {import('@tanstack/react-query').QueryResult<object>}
 */
export const authRoot_Get = (options) => {
  const queryKey = ['auth_root__get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/auth/'),
    ...options,
  });
};

/**
 * @description Hook for /auth/health [GET]
 * @returns {import('@tanstack/react-query').QueryResult<object>}
 */
export const authHealthCheckHealthGet = (options) => {
  const queryKey = ['auth_health_check_health_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/auth/health'),
    ...options,
  });
};

/**
 * @description Hook for /jobs/api/v1/companies [GET]
 * @returns {import('@tanstack/react-query').QueryResult<CompanyOut[]>}
 */
export const listCompaniesApiV1CompaniesGet = (options) => {
  const queryKey = ['list_companies_api_v1_companies_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/jobs/api/v1/companies'),
    ...options,
  });
};

/**
 * @description Hook for /jobs/api/v1/companies [POST]
 * @param {CompanyCreate} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<CompanyOut, unknown, CompanyCreate>}
 */
export const createCompanyApiV1CompaniesPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/jobs/api/v1/companies', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /jobs/api/v1/companies/{company_id} [GET]
 * @returns {import('@tanstack/react-query').QueryResult<CompanyOut>}
 */
export const getCompanyApiV1Companies_CompanyId_Get = (options) => {
  const company_id = options?.company_id;
  const queryKey = ['get_company_api_v1_companies__company_id__get', company_id];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', `/jobs/api/v1/companies/${company_id}`),
    enabled: !!company_id,
    ...options,
  });
};

/**
 * @description Hook for /jobs/api/v1/companies/{company_id} [PUT]
 * @param {CompanyUpdate} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<CompanyOut, unknown, CompanyUpdate>}
 */
export const updateCompanyApiV1Companies_CompanyId_Put = (options) => {
  return useMutation({
    mutationFn: ({ company_id, ...data }) => apiClient('put', `/jobs/api/v1/companies/${company_id}`, data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /jobs/api/v1/companies/{company_id} [DELETE]
 * @param {void} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<HTTPValidationError, unknown, void>}
 */
export const deleteCompanyApiV1Companies_CompanyId_Delete = (options) => {
  return useMutation({
    mutationFn: ({ company_id, ...data }) => apiClient('delete', `/jobs/api/v1/companies/${company_id}`, data),
    ...options,
  });
};

/**
 * @description Hook for /jobs/api/v1/jobs [GET]
 * @returns {import('@tanstack/react-query').QueryResult<JobOut[]>}
 */
export const listJobsApiV1JobsGet = (options) => {
  const queryKey = ['list_jobs_api_v1_jobs_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/jobs/api/v1/jobs'),
    ...options,
  });
};

/**
 * @description Hook for /jobs/api/v1/jobs [POST]
 * @param {JobCreate} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<JobOut, unknown, JobCreate>}
 */
export const createJobApiV1JobsPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/jobs/api/v1/jobs', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /jobs/api/v1/jobs/{job_id} [GET]
 * @returns {import('@tanstack/react-query').QueryResult<JobOut>}
 */
export const getJobApiV1Jobs_JobId_Get = (options) => {
  const job_id = options?.job_id;
  const queryKey = ['get_job_api_v1_jobs__job_id__get', job_id];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', `/jobs/api/v1/jobs/${job_id}`),
    enabled: !!job_id,
    ...options,
  });
};

/**
 * @description Hook for /jobs/api/v1/jobs/{job_id} [PUT]
 * @param {JobUpdate} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<JobOut, unknown, JobUpdate>}
 */
export const updateJobApiV1Jobs_JobId_Put = (options) => {
  return useMutation({
    mutationFn: ({ job_id, ...data }) => apiClient('put', `/jobs/api/v1/jobs/${job_id}`, data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /jobs/api/v1/jobs/{job_id} [DELETE]
 * @param {void} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<HTTPValidationError, unknown, void>}
 */
export const deleteJobApiV1Jobs_JobId_Delete = (options) => {
  return useMutation({
    mutationFn: ({ job_id, ...data }) => apiClient('delete', `/jobs/api/v1/jobs/${job_id}`, data),
    ...options,
  });
};

/**
 * @description Hook for /jobs/api/v1/jobs/{job_id}/restore [POST]
 * @param {void} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<JobOut, unknown, void>}
 */
export const restoreJobApiV1Jobs_JobId_RestorePost = (options) => {
  return useMutation({
    mutationFn: ({ job_id, ...data }) => apiClient('post', `/jobs/api/v1/jobs/${job_id}/restore`, data),
    ...options,
  });
};

/**
 * @description Hook for /jobs/api/v1/jobs/{job_id}/audits [GET]
 * @returns {import('@tanstack/react-query').QueryResult<object[]>}
 */
export const listJobAuditsApiV1Jobs_JobId_AuditsGet = (options) => {
  const job_id = options?.job_id;
  const queryKey = ['list_job_audits_api_v1_jobs__job_id__audits_get', job_id];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', `/jobs/api/v1/jobs/${job_id}/audits`),
    enabled: !!job_id,
    ...options,
  });
};

/**
 * @description Hook for /jobs/api/v1/jobs/{job_id}/hard-delete [DELETE]
 * @param {void} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<HTTPValidationError, unknown, void>}
 */
export const hardDeleteJobApiV1Jobs_JobId_HardDeleteDelete = (options) => {
  return useMutation({
    mutationFn: ({ job_id, ...data }) => apiClient('delete', `/jobs/api/v1/jobs/${job_id}/hard-delete`, data),
    ...options,
  });
};

/**
 * @description Hook for /jobs/api/v1/jobs/stats [GET]
 * @returns {import('@tanstack/react-query').QueryResult<object>}
 */
export const jobsStatsApiV1JobsStatsGet = (options) => {
  const queryKey = ['jobs_stats_api_v1_jobs_stats_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/jobs/api/v1/jobs/stats'),
    ...options,
  });
};

/**
 * @description Hook for /jobs/ [GET]
 * @returns {import('@tanstack/react-query').QueryResult<RootModel>}
 */
export const jobsRoot_Get = (options) => {
  const queryKey = ['jobs_root__get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/jobs/'),
    ...options,
  });
};

/**
 * @description Hook for /jobs/health [GET]
 * @returns {import('@tanstack/react-query').QueryResult<HealthModel>}
 */
export const jobsHealthCheckHealthGet = (options) => {
  const queryKey = ['jobs_health_check_health_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/jobs/health'),
    ...options,
  });
};

/**
 * @description Hook for /jobs/healthz [GET]
 * @returns {import('@tanstack/react-query').QueryResult<HealthZModel>}
 */
export const jobsHealthzHealthzGet = (options) => {
  const queryKey = ['jobs_healthz_healthz_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/jobs/healthz'),
    ...options,
  });
};

/**
 * @description Hook for /news/api/v1/news/latest [GET]
 * @returns {import('@tanstack/react-query').QueryResult<NewsResponse>}
 */
export const getLatestNewsApiV1NewsLatestGet = (options) => {
  const queryKey = ['get_latest_news_api_v1_news_latest_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/news/api/v1/news/latest'),
    ...options,
  });
};

/**
 * @description Hook for /news/api/v1/news/category/{category} [GET]
 * @returns {import('@tanstack/react-query').QueryResult<NewsResponse>}
 */
export const getNewsByCategoryApiV1NewsCategory_Category_Get = (options) => {
  const queryKey = ['get_news_by_category_api_v1_news_category__category__get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/news/api/v1/news/category/{category}'),
    ...options,
  });
};

/**
 * @description Hook for /news/api/v1/news/source/{source_name} [GET]
 * @returns {import('@tanstack/react-query').QueryResult<NewsResponse>}
 */
export const getNewsBySourceApiV1NewsSource_SourceName_Get = (options) => {
  const queryKey = ['get_news_by_source_api_v1_news_source__source_name__get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/news/api/v1/news/source/{source_name}'),
    ...options,
  });
};

/**
 * @description Hook for /news/api/v1/news/search [GET]
 * @returns {import('@tanstack/react-query').QueryResult<NewsResponse>}
 */
export const searchNewsApiV1NewsSearchGet = (options) => {
  const queryKey = ['search_news_api_v1_news_search_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/news/api/v1/news/search'),
    ...options,
  });
};

/**
 * @description Hook for /news/api/v1/news/summary [GET]
 * @returns {import('@tanstack/react-query').QueryResult<NewsSummaryResponse>}
 */
export const getNewsSummaryApiV1NewsSummaryGet = (options) => {
  const queryKey = ['get_news_summary_api_v1_news_summary_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/news/api/v1/news/summary'),
    ...options,
  });
};

/**
 * @description Hook for /news/api/v1/news/refresh [POST]
 * @param {void} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<CacheRefreshResponse, unknown, void>}
 */
export const refreshNewsCacheApiV1NewsRefreshPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/news/api/v1/news/refresh', data),
    ...options,
  });
};

/**
 * @description Hook for /news/api/v1/news/trending [GET]
 * @returns {import('@tanstack/react-query').QueryResult<NewsResponse>}
 */
export const getTrendingNewsApiV1NewsTrendingGet = (options) => {
  const queryKey = ['get_trending_news_api_v1_news_trending_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/news/api/v1/news/trending'),
    ...options,
  });
};

/**
 * @description Hook for /news/api/v1/news/proxy/image [GET]
 * @returns {import('@tanstack/react-query').QueryResult<object>}
 */
export const proxyImageApiV1NewsProxyImageGet = (options) => {
  const queryKey = ['proxy_image_api_v1_news_proxy_image_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/news/api/v1/news/proxy/image'),
    ...options,
  });
};

/**
 * @description Hook for /news/ [GET]
 * @returns {import('@tanstack/react-query').QueryResult<RootModel>}
 */
export const newsRoot_Get = (options) => {
  const queryKey = ['news_root__get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/news/'),
    ...options,
  });
};

/**
 * @description Hook for /news/health [GET]
 * @returns {import('@tanstack/react-query').QueryResult<HealthModel>}
 */
export const newsHealthCheckHealthGet = (options) => {
  const queryKey = ['news_health_check_health_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/news/health'),
    ...options,
  });
};

/**
 * @description Hook for /news/healthz [GET]
 * @returns {import('@tanstack/react-query').QueryResult<HealthZModel>}
 */
export const newsHealthzHealthzGet = (options) => {
  const queryKey = ['news_healthz_healthz_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/news/healthz'),
    ...options,
  });
};

/**
 * @description Hook for /mentorship/me [GET]
 * @returns {import('@tanstack/react-query').QueryResult<ProfileOut>}
 */
export const mentorshipMeGet = (options) => {
  const queryKey = ['mentorship_me_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/mentorship/me'),
    ...options,
  });
};

/**
 * @description Hook for /mentorship/me [PATCH]
 * @param {ProfileUpdate} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<ProfileOut, unknown, ProfileUpdate>}
 */
export const updateMeMePatch = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('patch', '/mentorship/me', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /mentorship/skills [GET]
 * @returns {import('@tanstack/react-query').QueryResult<SkillOut[]>}
 */
export const listSkillsSkillsGet = (options) => {
  const queryKey = ['list_skills_skills_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/mentorship/skills'),
    ...options,
  });
};

/**
 * @description Hook for /mentorship/skills [POST]
 * @param {SkillBase} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<SkillOut, unknown, SkillBase>}
 */
export const createSkillSkillsPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/mentorship/skills', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /mentorship/me/mentor/skills [GET]
 * @returns {import('@tanstack/react-query').QueryResult<MentorSkillOut[]>}
 */
export const myMentorSkillsMeMentorSkillsGet = (options) => {
  const queryKey = ['my_mentor_skills_me_mentor_skills_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/mentorship/me/mentor/skills'),
    ...options,
  });
};

/**
 * @description Hook for /mentorship/me/mentor/skills [POST]
 * @param {MentorSkillIn} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<MentorSkillOut, unknown, MentorSkillIn>}
 */
export const addMentorSkillMeMentorSkillsPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/mentorship/me/mentor/skills', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /mentorship/me/mentor/skills/{skill_id} [DELETE]
 * @param {void} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<HTTPValidationError, unknown, void>}
 */
export const deleteMentorSkillMeMentorSkills_SkillId_Delete = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('delete', '/mentorship/me/mentor/skills/{skill_id}', data),
    ...options,
  });
};

/**
 * @description Hook for /mentorship/me/mentee/goals [GET]
 * @returns {import('@tanstack/react-query').QueryResult<GoalOut[]>}
 */
export const myGoalsMeMenteeGoalsGet = (options) => {
  const queryKey = ['my_goals_me_mentee_goals_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/mentorship/me/mentee/goals'),
    ...options,
  });
};

/**
 * @description Hook for /mentorship/me/mentee/goals [POST]
 * @param {GoalIn} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<GoalOut, unknown, GoalIn>}
 */
export const addGoalMeMenteeGoalsPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/mentorship/me/mentee/goals', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /mentorship/me/mentee/goals/{goal_id} [DELETE]
 * @param {void} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<HTTPValidationError, unknown, void>}
 */
export const deleteGoalMeMenteeGoals_GoalId_Delete = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('delete', '/mentorship/me/mentee/goals/{goal_id}', data),
    ...options,
  });
};

/**
 * @description Hook for /mentorship/mentors/search [GET]
 * @returns {import('@tanstack/react-query').QueryResult<ProfileOut[]>}
 */
export const mentorSearchMentorsSearchGet = (options) => {
  const queryKey = ['mentor_search_mentors_search_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/mentorship/mentors/search'),
    ...options,
  });
};

/**
 * @description Hook for /mentorship/mentors/{mentor_id}/availability [GET]
 * @returns {import('@tanstack/react-query').QueryResult<AvailabilityOut[]>}
 */
export const listAvailabilityMentors_MentorId_AvailabilityGet = (options) => {
  const queryKey = ['list_availability_mentors__mentor_id__availability_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/mentorship/mentors/{mentor_id}/availability'),
    ...options,
  });
};

/**
 * @description Hook for /mentorship/me/mentor/availability [POST]
 * @param {AvailabilityIn} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<AvailabilityOut, unknown, AvailabilityIn>}
 */
export const createAvailabilityMeMentorAvailabilityPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/mentorship/me/mentor/availability', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /mentorship/sessions [GET]
 * @returns {import('@tanstack/react-query').QueryResult<SessionOut[]>}
 */
export const listSessionsSessionsGet = (options) => {
  const queryKey = ['list_sessions_sessions_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/mentorship/sessions'),
    ...options,
  });
};

/**
 * @description Hook for /mentorship/sessions [POST]
 * @param {SessionIn} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<SessionOut, unknown, SessionIn>}
 */
export const bookSessionSessionsPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/mentorship/sessions', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /mentorship/sessions/{session_id} [PATCH]
 * @param {void} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<object, unknown, void>}
 */
export const updateSessionSessions_SessionId_Patch = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('patch', '/mentorship/sessions/{session_id}', data),
    ...options,
  });
};

/**
 * @description Hook for /mentorship/sessions/{session_id}/review [POST]
 * @param {ReviewIn} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<object, unknown, ReviewIn>}
 */
export const createReviewSessions_SessionId_ReviewPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/mentorship/sessions/{session_id}/review', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /mentorship/ [GET]
 * @returns {import('@tanstack/react-query').QueryResult<RootModel>}
 */
export const mentorshipRoot_Get = (options) => {
  const queryKey = ['mentorship_root__get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/mentorship/'),
    ...options,
  });
};

/**
 * @description Hook for /mentorship/health [GET]
 * @returns {import('@tanstack/react-query').QueryResult<HealthModel>}
 */
export const mentorshipHealthCheckHealthGet = (options) => {
  const queryKey = ['mentorship_health_check_health_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/mentorship/health'),
    ...options,
  });
};

/**
 * @description Hook for /mentorship/healthz [GET]
 * @returns {import('@tanstack/react-query').QueryResult<HealthZModel>}
 */
export const mentorshipHealthzHealthzGet = (options) => {
  const queryKey = ['mentorship_healthz_healthz_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/mentorship/healthz'),
    ...options,
  });
};

/**
 * @description Hook for /resume_builder/health [GET]
 * @returns {import('@tanstack/react-query').QueryResult<HealthModel>}
 */
export const resumebuilderHealthCheckHealthGet = (options) => {
  const queryKey = ['resumebuilder_health_check_health_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/resume_builder/health'),
    ...options,
  });
};

/**
 * @description Hook for /resume_builder/resume/parse [POST]
 * @param {Body_parse_resume_resume_parse_post} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<ResumeParseResponseSchema, unknown, Body_parse_resume_resume_parse_post>}
 */
export const parseResumeResumeParsePost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/resume_builder/resume/parse', data, 'multipart/form-data'),
    ...options,
  });
};

/**
 * @description Hook for /resume_builder/resume/generate [POST]
 * @param {ResumeGenerateRequestSchema} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<ResumeGenerateResponseSchema, unknown, ResumeGenerateRequestSchema>}
 */
export const generateResumeResumeGeneratePost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/resume_builder/resume/generate', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /resume_builder/resume/export/pdf/ [POST]
 * @param {ExportRequestSchema} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<object, unknown, ExportRequestSchema>}
 */
export const exportPdfResumeExportPdf_Post = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/resume_builder/resume/export/pdf/', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /resume_builder/resume/export/docx/ [POST]
 * @param {ExportRequestSchema} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<object, unknown, ExportRequestSchema>}
 */
export const exportDocxResumeExportDocx_Post = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/resume_builder/resume/export/docx/', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /resume_builder/parse-resume [POST]
 * @param {Body_parse_resume_legacy_parse_resume_post} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<object, unknown, Body_parse_resume_legacy_parse_resume_post>}
 */
export const parseResumeLegacyParseResumePost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/resume_builder/parse-resume', data, 'multipart/form-data'),
    ...options,
  });
};

/**
 * @description Hook for /resume_builder/generate-resume [POST]
 * @param {object} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<object, unknown, object>}
 */
export const generateResumeLegacyGenerateResumePost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/resume_builder/generate-resume', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /resume_builder/api/export/pdf/ [POST]
 * @param {object} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<object, unknown, object>}
 */
export const exportPdfLegacyApiExportPdf_Post = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/resume_builder/api/export/pdf/', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /resume_builder/api/export/docx/ [POST]
 * @param {object} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<object, unknown, object>}
 */
export const exportDocxLegacyApiExportDocx_Post = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/resume_builder/api/export/docx/', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /resume_builder/ [GET]
 * @returns {import('@tanstack/react-query').QueryResult<RootModel>}
 */
export const root_Get = (options) => {
  const queryKey = ['root__get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/resume_builder/'),
    ...options,
  });
};

/**
 * @description Hook for /resume_builder/healthz [GET]
 * @returns {import('@tanstack/react-query').QueryResult<HealthZModel>}
 */
export const resumebuilderHealthzHealthzGet = (options) => {
  const queryKey = ['resumebuilder_healthz_healthz_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/resume_builder/healthz'),
    ...options,
  });
};

/**
 * @description Hook for /interview/interview/start [POST]
 * @param {InterviewStartRequest} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<InterviewStartResponse, unknown, InterviewStartRequest>}
 */
export const startInterviewInterviewStartPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/interview/interview/start', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /interview/interview/{session_id}/history [GET]
 * @returns {import('@tanstack/react-query').QueryResult<object>}
 */
export const getConversationHistoryInterview_SessionId_HistoryGet = (options) => {
  const queryKey = ['get_conversation_history_interview__session_id__history_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/interview/interview/{session_id}/history'),
    ...options,
  });
};

/**
 * @description Hook for /interview/interview/reply [POST]
 * @param {InterviewReplyRequest} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<InterviewReplyResponse, unknown, InterviewReplyRequest>}
 */
export const submitReplyInterviewReplyPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/interview/interview/reply', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /interview/interview/analysis/{session_id} [GET]
 * @returns {import('@tanstack/react-query').QueryResult<object>}
 */
export const getInterviewAnalysisInterviewAnalysis_SessionId_Get = (options) => {
  const queryKey = ['get_interview_analysis_interview_analysis__session_id__get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/interview/interview/analysis/{session_id}'),
    ...options,
  });
};

/**
 * @description Hook for /interview/analyze/health [GET]
 * @returns {import('@tanstack/react-query').QueryResult<object>}
 */
export const aiInterviewAnalysisHealthAnalyzeHealthGet = (options) => {
  const queryKey = ['ai_interview_analysis_health_analyze_health_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/interview/analyze/health'),
    ...options,
  });
};

/**
 * @description Hook for /interview/analyze/frame [POST]
 * @param {FrameAnalysisRequest} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<FrameAnalysisResponse, unknown, FrameAnalysisRequest>}
 */
export const analyzeFrameAnalyzeFramePost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/interview/analyze/frame', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /interview/analyze/session/{session_id}/metrics [GET]
 * @returns {import('@tanstack/react-query').QueryResult<object>}
 */
export const getSessionMetricsAnalyzeSession_SessionId_MetricsGet = (options) => {
  const queryKey = ['get_session_metrics_analyze_session__session_id__metrics_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/interview/analyze/session/{session_id}/metrics'),
    ...options,
  });
};

/**
 * @description Hook for /interview/analyze/session/{session_id}/trends [GET]
 * @returns {import('@tanstack/react-query').QueryResult<object>}
 */
export const getPerformanceTrendsAnalyzeSession_SessionId_TrendsGet = (options) => {
  const queryKey = ['get_performance_trends_analyze_session__session_id__trends_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/interview/analyze/session/{session_id}/trends'),
    ...options,
  });
};

/**
 * @description Hook for /interview/user/{user_id}/profile [GET]
 * @returns {import('@tanstack/react-query').QueryResult<object>}
 */
export const getUserProfileUser_UserId_ProfileGet = (options) => {
  const queryKey = ['get_user_profile_user__user_id__profile_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/interview/user/{user_id}/profile'),
    ...options,
  });
};

/**
 * @description Hook for /interview/user/{user_id}/profile [POST]
 * @param {object} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<object, unknown, object>}
 */
export const updateUserProfileUser_UserId_ProfilePost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/interview/user/{user_id}/profile', data, 'application/json'),
    ...options,
  });
};

/**
 * @description Hook for /interview/user/{user_id}/progress [GET]
 * @returns {import('@tanstack/react-query').QueryResult<object>}
 */
export const getUserProgressUser_UserId_ProgressGet = (options) => {
  const queryKey = ['get_user_progress_user__user_id__progress_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/interview/user/{user_id}/progress'),
    ...options,
  });
};

/**
 * @description Hook for /interview/user/{user_id}/recommendations [GET]
 * @returns {import('@tanstack/react-query').QueryResult<object>}
 */
export const getUserRecommendationsUser_UserId_RecommendationsGet = (options) => {
  const queryKey = ['get_user_recommendations_user__user_id__recommendations_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/interview/user/{user_id}/recommendations'),
    ...options,
  });
};

/**
 * @description Hook for /interview/user/{user_id}/history [GET]
 * @returns {import('@tanstack/react-query').QueryResult<object>}
 */
export const getUserHistoryUser_UserId_HistoryGet = (options) => {
  const queryKey = ['get_user_history_user__user_id__history_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/interview/user/{user_id}/history'),
    ...options,
  });
};

/**
 * @description Hook for /interview/audio/devices [GET]
 * @returns {import('@tanstack/react-query').QueryResult<object>}
 */
export const getAudioDevicesAudioDevicesGet = (options) => {
  const queryKey = ['get_audio_devices_audio_devices_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/interview/audio/devices'),
    ...options,
  });
};

/**
 * @description Hook for /interview/audio/record [POST]
 * @param {Body_record_audio_audio_record_post} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<object, unknown, Body_record_audio_audio_record_post>}
 */
export const recordAudioAudioRecordPost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/interview/audio/record', data, 'multipart/form-data'),
    ...options,
  });
};

/**
 * @description Hook for /interview/audio/transcribe [POST]
 * @param {Body_transcribe_audio_file_audio_transcribe_post} data The request body based on the OpenAPI specification.
 * @returns {import('@tanstack/react-query').MutationResult<object, unknown, Body_transcribe_audio_file_audio_transcribe_post>}
 */
export const transcribeAudioFileAudioTranscribePost = (options) => {
  return useMutation({
    mutationFn: (data) => apiClient('post', '/interview/audio/transcribe', data, 'multipart/form-data'),
    ...options,
  });
};

/**
 * @description Hook for /interview/templates/ [GET]
 * @returns {import('@tanstack/react-query').QueryResult<object>}
 */
export const getTemplatesTemplates_Get = (options) => {
  const queryKey = ['get_templates_templates__get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/interview/templates/'),
    ...options,
  });
};

/**
 * @description Hook for /interview/templates/{template_id} [GET]
 * @returns {import('@tanstack/react-query').QueryResult<object>}
 */
export const getTemplateTemplates_TemplateId_Get = (options) => {
  const queryKey = ['get_template_templates__template_id__get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/interview/templates/{template_id}'),
    ...options,
  });
};

/**
 * @description Hook for /interview/templates/recommendations [GET]
 * @returns {import('@tanstack/react-query').QueryResult<object>}
 */
export const getTemplateRecommendationsTemplatesRecommendationsGet = (options) => {
  const queryKey = ['get_template_recommendations_templates_recommendations_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/interview/templates/recommendations'),
    ...options,
  });
};

/**
 * @description Hook for /interview/health [GET]
 * @returns {import('@tanstack/react-query').QueryResult<HealthResponse>}
 */
export const aiInterviewHealthCheckHealthGet = (options) => {
  const queryKey = ['ai_interview_health_check_health_get'];
  return useQuery({
    queryKey,
    queryFn: () => apiClient('get', '/interview/health'),
    ...options,
  });
};
